# Chunk 1
knitr::include_graphics("img/MI2a.PNG")
# Chunk 2
knitr::include_graphics("prezentacje_biala_fioletowa/Slajd8.PNG")
# Chunk 3
knitr::include_graphics("prezentacje_biala_fioletowa/Slajd9.PNG")
# Chunk 4
knitr::include_graphics("prezentacje_biala_fioletowa/Slajd10.PNG")
# Chunk 5
knitr::include_graphics("prezentacje_biala_fioletowa/Slajd11.PNG")
# Chunk 6
knitr::include_graphics("prezentacje_biala_fioletowa/Slajd12.PNG")
# Chunk 7
knitr::include_graphics("img/DNA3.PNG")
# Chunk 8
library(MLExpResso)
library(MLExpRessoData)
# Chunk 9
head(BRCA_exp)[1:5,1:5]
# Chunk 10
condition_exp <- ifelse(BRCA_exp$SUBTYPE == "LumA", "LumA", "other")
res_exp <- calculate_test(
data = BRCA_exp[,!(colnames(BRCA_exp) == "SUBTYPE")],
condition = condition_exp,
test = "lrt"
)
head(res_exp)
library(MLExpResso)
library(MLExpRessoData)
BRCA_exp[1:5, 1:5]
condition_exp <- ifelse(BRCA_exp$SUBTYPE == "LumA", "LumA", "other")
head(condition_exp, 8)
plot_means(
data = BRCA_exp[,!(colnames(BRCA_exp) == "SUBTYPE")],
condition = condition_exp,
names = 5
)
res_exp <- calculate_test(
data = BRCA_exp[,!(colnames(BRCA_exp) == "SUBTYPE")],
condition = condition_exp,
test = "lrt"
)
head(res_exp)
plot_volcano(res_exp, line = 0.05, names = 0.000000001, fold_line = 2)
head(BRCA_met)[1:5, 1:4]
BRCA_met_gen <- aggregate_probes(data = BRCA_met)
head(BRCA_met_gen)[1:5, 1:4]
condition_met <- ifelse(BRCA_met$SUBTYPE == "LumA", "LumA", "other")
head(condition_met, 8)
plot_methylation_path(BRCA_met, condition_met, 'CACNA1G', show.gene = TRUE, observ = TRUE)
res_met <- calculate_test(
data = BRCA_met_gen,
condition = condition_met,
test = "ttest"
)
head(res_met)
comparison <- calculate_comparison_table(
data1 = BRCA_exp[,!(colnames(BRCA_exp)=="SUBTYPE")],
data2 = BRCA_met_gen,
condition1 = condition_exp,
condition2 = condition_met,
test1 = "nbinom2",
test2 = "ttest"
)
head(comparison)
plot_pvalues(comparison, names = 10)
test_exp <- comparison[ , c("id", "nbinom2.log2.fold", "nbinom2.pval")]
test_met <- comparison[ , c("id", "ttest.log2.fold", "ttest.pval")]
plot_volcanoes(
data.m = BRCA_met[,!(colnames(BRCA_met) == "SUBTYPE")],
data.e = BRCA_exp[,!(colnames(BRCA_exp) == "SUBTYPE")],
condition.m = condition_met,
condition.e = condition_exp,
gene = "CACNA1G",
test.m = test_met,
test.e = test_exp,
values=TRUE
)
plot_gene(
data.m = BRCA_met,
data.e = BRCA_exp,
condition.m = condition_met,
condition.e = condition_exp,
gene = "CACNA1G",
show.gene = TRUE,
observ = TRUE,
islands = TRUE
)
plot_diff_boxplot(BRCA_exp, condition_exp, gene = "CACNA1G")
save(BRCA_met_gen, comparison, re_exp, _res_met, tet_exp, test_met, condition_met, condition_exp, file = "data_pres.Rda")
save(BRCA_met_gen, comparison, re_exp, _res_met, tet_exp, test_met, condition_met, condition_exp, file = "data_pres")
save(BRCA_met_gen, comparison, re_exp, res_met, tet_exp, test_met, condition_met, condition_exp, file = "data_pres.Rda")
save(BRCA_met_gen, comparison, res_exp, res_met, test_exp, test_met, condition_met, condition_exp, file = "data_pres.Rda")
getwd()
load("data_pres.Rda")
library(MLExpResso)
library(MLExpRessoData)
load("data_pres.Rda")
plot_volcanoes(
data.m = BRCA_met[,!(colnames(BRCA_met) == "SUBTYPE")],
data.e = BRCA_exp[,!(colnames(BRCA_exp) == "SUBTYPE")],
condition.m = condition_met,
condition.e = condition_exp,
gene = "CACNA1G",
test.m = test_met,
test.e = test_exp,
values=TRUE
)
plot_volcanoes(
data.m = BRCA_met[,!(colnames(BRCA_met) == "SUBTYPE")],
data.e = BRCA_exp[,!(colnames(BRCA_exp) == "SUBTYPE")],
condition.m = condition_met,
condition.e = condition_exp,
gene = "CACNA1G",
test.m = test_met,
test.e = test_exp,
values=TRUE
)
plot_volcanoes(
data.m = BRCA_met[,!(colnames(BRCA_met) == "SUBTYPE")],
data.e = BRCA_exp[,!(colnames(BRCA_exp) == "SUBTYPE")],
condition.m = condition_met,
condition.e = condition_exp,
gene = "CACNA1G",
test.m = test_met,
test.e = test_exp,
values=TRUE
)
dev.off()
plot_volcanoes(
data.m = BRCA_met[,!(colnames(BRCA_met) == "SUBTYPE")],
data.e = BRCA_exp[,!(colnames(BRCA_exp) == "SUBTYPE")],
condition.m = condition_met,
condition.e = condition_exp,
gene = "CACNA1G",
test.m = test_met,
test.e = test_exp,
values=TRUE
)
plot_gene(
data.m = BRCA_met,
data.e = BRCA_exp,
condition.m = condition_met,
condition.e = condition_exp,
gene = "CACNA1G",
show.gene = TRUE,
observ = TRUE,
islands = TRUE
)
